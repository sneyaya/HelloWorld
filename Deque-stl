#include <iostream>
#include <deque> 
using namespace std;

void printKMax(int arr[], int n, int k){
 deque<int> dq;
    
    // Process the first k elements
    for (int i = 0; i < k; i++) {
        while (!dq.empty() && arr[dq.back()] <= arr[i]) {
            dq.pop_back();
        }
        dq.push_back(i);
    }
    
    // Print the maximum of the first window
    cout << arr[dq.front()] << " ";
    
    // Process the rest of the array
    for (int i = k; i < n; i++) {
        // Remove elements not within the window
        while (!dq.empty() && dq.front() <= i - k) {
            dq.pop_front();
        }
        
        // Remove elements smaller than the current element
        while (!dq.empty() && arr[dq.back()] <= arr[i]) {
            dq.pop_back();
        }
        
        // Add the current element at the back of the deque
        dq.push_back(i);
        
        // The front of the deque contains the index of the maximum element of the current window
        cout << arr[dq.front()] << " ";
    }
    
    cout << endl;
}

int main(){
  
	int t;
	cin >> t;
	while(t>0) {
		int n,k;
    	cin >> n >> k;
    	int i;
    	int arr[n];
    	for(i=0;i<n;i++)
      		cin >> arr[i];
    	printKMax(arr, n, k);
    	t--;
  	}
  	return 0;
}
